name: CI

on:
  push:
    branches:
      - master 
  pull_request:
    branches:
      - master
  merge_group:
    types: [checks_requested]
  workflow_dispatch: {}

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "--cfg=ci_run"
  MIRIFLAGS: '-Zmiri-permissive-provenance'
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"
  CLIPPY_FLAGS: "-D warnings -A clippy::needless-range-loop -A clippy::uninlined-format-args"
  # Supported python version range
  PYTHON_MIN_VERSION: 3.9
  PYTHON_MAX_VERSION: 3.13

jobs:
  # Computes if changes where made to each group of files, so we can run only the necessary checks.
  #
  # Always returns true if running on the default branch, to ensure all changes are throughly checked.
  changes:
    name: Compute file changes
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    #
    # Always returns true if running on the default branch, to ensure all changes are thoroughly checked.
    outputs:
      quizx: ${{ github.ref_name == github.event.repository.default_branch || steps.filter.outputs.quizx }}
      pybindings: ${{ github.ref_name == github.event.repository.default_branch || steps.filter.outputs.pybindings }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          quizx:
            - .github/workflows/ci.yml
            - 'quizx/**'
            - 'circuits/**'
            - 'Cargo.toml'
          pybindings:
            - .github/workflows/ci.yml
            - 'quizx/**'
            - 'pybindings/**'
            - 'Cargo.toml'
            - 'pyproject.toml'

  # Rust formatting check for quizx
  rust-fmt-quizx:
    name: ü¶Ä Rust formatting (quizx)
    needs: changes
    if: ${{ needs.changes.outputs.quizx == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - uses: mozilla-actions/sccache-action@v0.0.9
      - name: Check rust formatting
        run: cargo fmt -p quizx -- --check

  # Rust formatting check for pybindings
  rust-fmt-pybindings:
    name: ü¶Ä Rust formatting (pybindings)
    needs: changes
    if: ${{ needs.changes.outputs.pybindings == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - uses: mozilla-actions/sccache-action@v0.0.9
      - name: Check rust formatting
        run: cargo fmt -p quizx_pybindings -- --check

  # Rust clippy check for quizx
  rust-clippy-quizx:
    name: ü¶Ä Rust clippy (quizx)
    needs: changes
    if: ${{ needs.changes.outputs.quizx == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: mozilla-actions/sccache-action@v0.0.9
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -p quizx -- ${{ env.CLIPPY_FLAGS }}

  # Rust clippy check for pybindings
  rust-clippy-pybindings:
    name: ü¶Ä Rust clippy (pybindings)
    needs: changes
    if: ${{ needs.changes.outputs.pybindings == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: mozilla-actions/sccache-action@v0.0.9
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -p quizx_pybindings -- ${{ env.CLIPPY_FLAGS }}

  # Rust documentation for quizx
  rust-doc-quizx:
    name: ü¶Ä Rust documentation (quizx)
    needs: changes
    if: ${{ needs.changes.outputs.quizx == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
      - uses: mozilla-actions/sccache-action@v0.0.9
      - name: Build docs
        run: cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: "-Dwarnings"

  # Python type checking with mypy
  python-mypy:
    name: üêç Python type checking
    needs: changes
    if: ${{ needs.changes.outputs.pybindings == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: mozilla-actions/sccache-action@v0.0.9
      - name: Install rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Build quizx crate
        run: cargo build -p quizx
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Install the project libraries
        run: uv sync --frozen
      - name: Type check python with mypy
        run: uv run mypy .

  # Python formatting with ruff
  python-ruff-format:
    name: üêç Python formatting
    needs: changes
    if: ${{ needs.changes.outputs.pybindings == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: mozilla-actions/sccache-action@v0.0.9
      - name: Install rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Build quizx crate
        run: cargo build -p quizx
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Install the project libraries
        run: uv sync --frozen
      - name: Check python formatting with ruff
        run: uv run ruff format --check

  # Python linting with ruff  
  python-ruff-lint:
    name: üêç Python linting
    needs: changes
    if: ${{ needs.changes.outputs.pybindings == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: mozilla-actions/sccache-action@v0.0.9
      - name: Install rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Build quizx crate
        run: cargo build -p quizx
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Install the project libraries
        run: uv sync --frozen
      - name: Lint python with ruff
        run: uv run ruff check

  test-quizx-stable:
    needs: changes
    if: ${{ needs.changes.outputs.quizx == 'true' }}
    runs-on: ubuntu-latest
    name: ü¶Ä Test quizx (Rust stable)
    steps:
      - uses: actions/checkout@v4
      - uses: mozilla-actions/sccache-action@v0.0.9
      - id: toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 'stable'
      - name: Configure default rust toolchain
        run: rustup override set ${{steps.toolchain.outputs.name}}
      - name: Build QuiZX binary with no features
        run: cargo build --verbose --workspace --no-default-features --bin quizx
      - name: Build with no features
        run: cargo test --verbose --workspace --no-default-features --no-run -p quizx
      - name: Tests with no features
        run: cargo test --verbose --workspace --no-default-features -p quizx

  test-quizx-other:
    needs: changes
    if: ${{ needs.changes.outputs.quizx == 'true' && github.event_name != 'merge_group' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        rust: ['1.81', beta, nightly]
    name: ü¶Ä Test quizx (Rust ${{ matrix.rust }})
    steps:
      - uses: actions/checkout@v4
      - id: toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - name: Configure default rust toolchain
        run: rustup override set ${{steps.toolchain.outputs.name}}
      - uses: mozilla-actions/sccache-action@v0.0.9
      - name: Build QuiZX binary with all features
        run: cargo build --verbose --all-features --bin quizx
      - name: Build with all features
        run: cargo test --verbose --all-features --no-run -p quizx
      - name: Tests with all features
        run: cargo test --verbose --all-features -p quizx

  test-pybindings:
    name: üêç Build and Test quizx_pybindings
    needs: changes
    if: ${{ needs.changes.outputs.pybindings == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: mozilla-actions/sccache-action@v0.0.9
      - name: Install rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Install poetry
        run: pipx install poetry
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Build pyo3 bindings for minimum supported python version
        run: uv run --python ${{ env.PYTHON_MIN_VERSION }} maturin develop
      - name: Test pyo3 bindings for minimum supported python version
        run: uv run --python ${{ env.PYTHON_MIN_VERSION }} pytest
      - name: Build pyo3 bindings for latest supported python version
        run: uv run --python ${{ env.PYTHON_MAX_VERSION }} maturin develop
      - name: Test pyo3 bindings for latest supported python version
        run: uv run --python ${{ env.PYTHON_MAX_VERSION }} pytest

  # This is a meta job to mark successful completion of the required checks,
  # even if they are skipped due to no changes in the relevant files.
  required-checks:
    name: Required checks üêç
    needs: [changes, rust-fmt-quizx, rust-fmt-pybindings, rust-clippy-quizx, rust-clippy-pybindings, rust-doc-quizx, python-mypy, python-ruff-format, python-ruff-lint, test-quizx-stable, test-pybindings]
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    steps:
      - name: Fail if required checks failed
        # This condition should simply be `if: failure() || cancelled()`,
        # but there seems to be a bug in the github workflow runner.
        #
        # See https://github.com/orgs/community/discussions/80788
        if: |
          needs.changes.result == 'failure' || needs.changes.result == 'cancelled' ||
          needs.rust-fmt-quizx.result == 'failure' || needs.rust-fmt-quizx.result == 'cancelled' ||
          needs.rust-fmt-pybindings.result == 'failure' || needs.rust-fmt-pybindings.result == 'cancelled' ||
          needs.rust-clippy-quizx.result == 'failure' || needs.rust-clippy-quizx.result == 'cancelled' ||
          needs.rust-clippy-pybindings.result == 'failure' || needs.rust-clippy-pybindings.result == 'cancelled' ||
          needs.rust-doc-quizx.result == 'failure' || needs.rust-doc-quizx.result == 'cancelled' ||
          needs.python-mypy.result == 'failure' || needs.python-mypy.result == 'cancelled' ||
          needs.python-ruff-format.result == 'failure' || needs.python-ruff-format.result == 'cancelled' ||
          needs.python-ruff-lint.result == 'failure' || needs.python-ruff-lint.result == 'cancelled' ||
          needs.test-quizx-stable.result == 'failure' || needs.test-quizx-stable.result == 'cancelled' ||
          needs.test-pybindings.result == 'failure' || needs.test-pybindings.result == 'cancelled'
        run: |
          echo "Required checks failed"
          echo "Please check the logs for more information"
          exit 1
      - name: Pass if required checks passed
        run: |
          echo "All required checks passed"
